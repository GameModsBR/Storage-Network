buildscript {
    repositories {
        maven { url = "http://files.minecraftforge.net/maven" }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3+'
    }
}
apply plugin: 'net.minecraftforge.gradle'

version = "${mc_version}-${mod_version}"
group = "mrriegel.storagenetwork"
archivesBaseName = "SimpleStorageNetwork"

import net.minecraftforge.gradle.common.task.SignJar
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' 

minecraft {
    mappings channel: 'stable', version: '39-1.12'
	
   // version = "${mc_version}-${forge_version}"


    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}


dependencies {
 // {mc_version}-${forge_version}
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'


   implementation "mezz.jei:jei_${mc_version}:${jei_version}"
   implementation "fastworkbench:FastWorkbench:${mc_version}:${fb_version}"
//  optional:
//   deobfCompile "compact-machines:compactmachines3-${mc_version}:${cm_version}:${cm_build}" 
}


//task signJar(type: SignJar, dependsOn: reobfJar) {
//
//     // Skips if the keyStore property is missing.
//    onlyIf {
//        project.hasProperty('keyStore')
//    }
//
//     // findProperty allows us to reference the property without it existing.
//    // Using project.propName would cause the script to fail validation if
//    // the property did not exist.
//    keyStore = project.findProperty('keyStore')
//    alias = project.findProperty('keyStoreAlias')
//    storePass = project.findProperty('keyStorePass')
//    keyPass = project.findProperty('keyStoreKeyPass')
//    inputFile = jar.archivePath
//    outputFile = jar.archivePath
//}
//// Runs this task automatically when build is ran.
//build.dependsOn signJar

repositories {
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
 //   maven { //Guide API
  //      url "http://tehnut.info/maven/"
   // }
    maven {
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')



